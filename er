curl(1)                                                  Curl Manual                                                 curl(1)

NNAAMMEE
       curl - transfer a URL

SSYYNNOOPPSSIISS
       ccuurrll [[ooppttiioonnss // UURRLLss]]

DDEESSCCRRIIPPTTIIOONN
       ccuurrll is a tool to transfer data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS, GO‐
       PHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS,  TELNET  and
       TFTP). The command is designed to work without user interaction.

       curl  offers  a  busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connec‐
       tions, cookies, file transfer resume, Metalink, and more. As you will see below, the number  of  features  will  make
       your head spin!

       curl is powered by libcurl for all transfer-related features. See _l_i_b_c_u_r_l_(_3_) for details.

UURRLL
       The URL syntax is protocol-dependent. You'll find a detailed description in RFC 3986.

       You can specify multiple URLs or parts of URLs by writing part sets within braces as in:

         http://site.{one,two,three}.com

       or you can get sequences of alphanumeric series by using [] as in:

         ftp://ftp.example.com/file[1-100].txt

         ftp://ftp.example.com/file[001-100].txt    (with leading zeros)

         ftp://ftp.example.com/file[a-z].txt

       Nested sequences are not supported, but you can use several ones next to each other:

         http://example.com/archive[1996-1999]/vol[1-4]/part{a,b,c}.html

       You  can specify any amount of URLs on the command line. They will be fetched in a sequential manner in the specified
       order. You can specify command line options and URLs mixed and in any order on the command line.

       You can specify a step counter for the ranges to get every Nth number or letter:

         http://example.com/file[1-100:10].txt

         http://example.com/file[a-z:2].txt

       When using [] or {} sequences when invoked from a command line prompt, you probably have to put the full  URL  within
       double  quotes to avoid the shell from interfering with it. This also goes for other characters treated special, like
       for example '&', '?' and '*'.

       Provide the IPv6 zone index in the URL with an escaped percentage sign and the interface name. Like in

         http://[fe80::3%25eth0]/

       If you specify URL without protocol:// prefix, curl will attempt to guess what protocol you might want. It will  then
       default  to HTTP but try other protocols based on often-used host name prefixes. For example, for host names starting
       with "ftp." curl will assume you want to speak FTP.

       curl will do its best to use what you pass to it as a URL. It is not trying to validate it as a syntactically correct
       URL by any means but is instead vveerryy liberal with what it accepts.

       curl  will attempt to re-use connections for multiple file transfers, so that getting many files from the same server
       will not do multiple connects / handshakes. This improves speed. Of course this is only done on files specified on  a
       single command line and cannot be used between separate curl invokes.

PPRROOGGRREESSSS MMEETTEERR
       curl normally displays a progress meter during operations, indicating the amount of transferred data, transfer speeds
       and estimated time left, etc. The progress meter displays number of bytes and the speeds are in bytes per second. The
       suffixes (k, M, G, T, P) are 1024 based. For example 1k is 1024 bytes. 1M is 1048576 bytes.

       curl displays this data to the terminal by default, so if you invoke curl to do an operation and it is about to write
       data to the terminal, it _d_i_s_a_b_l_e_s the progress meter as otherwise it would mess up the output mixing  progress  meter
       and response data.

       If you want a progress meter for HTTP POST or PUT requests, you need to redirect the response output to a file, using
       shell redirect (>), _-_o_, _-_-_o_u_t_p_u_t or similar.

       It is not the same case for FTP upload as that operation does not spit out any response data to the terminal.

       If you prefer a progress "bar" instead of the regular meter, _-_#_, _-_-_p_r_o_g_r_e_s_s_-_b_a_r is your friend. You can also  disable
       the progress meter completely with the _-_s_, _-_-_s_i_l_e_n_t option.

OOPPTTIIOONNSS
       Options start with one or two dashes. Many of the options require an additional value next to them.

       The  short  "single-dash" form of the options, -d for example, may be used with or without a space between it and its
       value, although a space is a recommended separator. The long "double-dash" form, _-_d_, _-_-_d_a_t_a for example,  requires  a
       space between it and its value.

       Short  version options that don't need any additional values can be used immediately next to each other, like for ex‐
       ample you can specify all the options -O, -L and -v at once as -OLv.

       In general, all boolean options are enabled with --ooppttiioonn and yet again disabled with --nnoo--option. That is,  you  use
       the  exact same option name but prefix it with "no-". However, in this list we mostly only list and show the --option
       version of them. (This concept with --no options was added in 7.19.0. Previously most options were toggled on/off  on
       repeated use of the same command line option.)

       --abstract-unix-socket <path>
              (HTTP)  Connect through an abstract Unix domain socket, instead of using the network.  Note: netstat shows the
              path of an abstract socket prefixed with '@', however the <path> argument should not have this leading charac‐
              ter.

              Added in 7.53.0.

       --alt-svc <file name>
              (HTTPS) WARNING: this option is experimental. Do not use in production.

              This  option  enables  the  alt-svc parser in curl. If the file name points to an existing alt-svc cache file,
              that will be used. After a completed transfer, the cache will be saved to the file name again if it  has  been
              modified.

              Specify a "" file name (zero length) to avoid loading/saving and make curl just handle the cache in memory.

              If  this option is used several times, curl will load contents from all the files but the the last one will be
              used for saving.

              Added in 7.64.1.

       --anyauth
              (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the  remote  site
              claims  to support. This is done by first doing a request and checking the response-headers, thus possibly in‐
              ducing an extra network round-trip. This is used instead of setting a specific  authentication  method,  which
              you can do with _-_-_b_a_s_i_c, _-_-_d_i_g_e_s_t, _-_-_n_t_l_m, and _-_-_n_e_g_o_t_i_a_t_e.

              Using  _-_-_a_n_y_a_u_t_h  is  not recommended if you do uploads from stdin, since it may require data to be sent twice
              and then the client must be able to rewind. If the need should arise when uploading from stdin, the upload op‐
              eration will fail.

              Used together with _-_u_, _-_-_u_s_e_r.

              See also _-_-_p_r_o_x_y_-_a_n_y_a_u_t_h and _-_-_b_a_s_i_c and _-_-_d_i_g_e_s_t.

       -a, --append
              (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it. If the
              remote file doesn't exist, it will be created.  Note that this flag is ignored by some SFTP servers (including
              OpenSSH).

       --basic
              (HTTP)  Tells  curl to use HTTP Basic authentication with the remote host. This is the default and this option
              is usually pointless, unless you use it to override a previously set option that sets a different  authentica‐
              tion method (such as _-_-_n_t_l_m, _-_-_d_i_g_e_s_t, or _-_-_n_e_g_o_t_i_a_t_e).

              Used together with _-_u_, _-_-_u_s_e_r.

              See also _-_-_p_r_o_x_y_-_b_a_s_i_c.

       --cacert <file>
              (TLS)  Tells  curl  to use the specified certificate file to verify the peer. The file may contain multiple CA
              certificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this,
              so this option is typically used to alter that default file.

              curl  recognizes  the  environment  variable named 'CURL_CA_BUNDLE' if it is set, and uses the given path as a
              path to a CA cert bundle. This option overrides that variable.

              The windows version of curl will automatically look for a CA certs file named ´curl-ca-bundle.crt´, either  in
              the same directory as curl.exe, or in the Current Working Directory, or in any folder along your PATH.

              If  curl is built against the NSS SSL library, the NSS PEM PKCS#11 module (libnsspem.so) needs to be available
              for this option to work properly.

              (iOS and macOS only) If curl is built against Secure Transport, then this option  is  supported  for  backward
              compatibility  with  other SSL engines, but it should not be set. If the option is not set, then curl will use
              the certificates in the system and user Keychain to verify the peer, which is the preferred method of  verify‐
              ing the peer's certificate chain.

              (Schannel  only)  This option is supported for Schannel in Windows 7 or later with libcurl 7.60 or later. This
              option is supported for backward compatibility with other SSL engines; instead it is recommended to  use  Win‐
              dows' store of root certificates (the default for Schannel).

              If this option is used several times, the last one will be used.

       --capath <dir>
              (TLS) Tells curl to use the specified certificate directory to verify the peer. Multiple paths can be provided
              by separating them with ":" (e.g.  "path1:path2:path3"). The certificates must be in PEM format, and  if  curl
              is  built  against  OpenSSL,  the  directory must have been processed using the c_rehash utility supplied with
              OpenSSL. Using _-_-_c_a_p_a_t_h can allow OpenSSL-powered curl to make SSL-connections much more efficiently than  us‐
              ing _-_-_c_a_c_e_r_t if the --cacert file contains many CA certificates.

              If this option is set, the default capath value will be ignored, and if it is used several times, the last one
              will be used.

       --cert-status
              (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request  (aka.
              OCSP stapling) TLS extension.

              If  this  option  is enabled and the server sends an invalid (e.g. expired) response, if the response suggests
              that the server certificate has been revoked, or no response at all is received, the verification fails.

              This is currently only implemented in the OpenSSL, GnuTLS and NSS backends.

              Added in 7.41.0.

       --cert-type <type>
              (TLS) Tells curl what type the provided client certificate is using. PEM, DER,  ENG  and  P12  are  recognized
              types.  If not specified, PEM is assumed.

              If this option is used several times, the last one will be used.

              See also _-_E_, _-_-_c_e_r_t and _-_-_k_e_y and _-_-_k_e_y_-_t_y_p_e.

       -E, --cert <certificate[:password]>
              (TLS)  Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another
              SSL-based protocol. The certificate must be in PKCS#12 format if using Secure Transport, or PEM format if  us‐
              ing  any other engine.  If the optional password isn't specified, it will be queried for on the terminal. Note
              that this option assumes a "certificate" file that is the private key and the client certificate concatenated!
              See _-_E_, _-_-_c_e_r_t and _-_-_k_e_y to specify them independently.

              If curl is built against the NSS SSL library then this option can tell curl the nickname of the certificate to
              use within the NSS database defined by the environment variable SSL_DIR (or by default /etc/pki/nssdb). If the
              NSS  PEM  PKCS#11  module  (libnsspem.so) is available then PEM files may be loaded. If you want to use a file
              from the current directory, please precede it with "./" prefix, in order to avoid confusion with  a  nickname.
              If  the  nickname contains ":", it needs to be preceded by "\" so that it is not recognized as password delim‐
              iter.  If the nickname contains "\", it needs to be escaped as "\\" so that it is not recognized as an  escape
              character.

              If  curl  is  built against OpenSSL library, and the engine pkcs11 is available, then a PKCS#11 URI (RFC 7512)
              can be used to specify a certificate located in a PKCS#11 device. A string beginning with  "pkcs11:"  will  be
              interpreted  as  a PKCS#11 URI. If a PKCS#11 URI is provided, then the _-_-_e_n_g_i_n_e option will be set as "pkcs11"
              if none was provided and the _-_-_c_e_r_t_-_t_y_p_e option will be set as "ENG" if none was provided.

              (iOS and macOS only) If curl is built against Secure Transport, then the certificate string can either be  the
              name of a certificate/private key in the system or user keychain, or the path to a PKCS#12-encoded certificate
              and private key. If you want to use a file from the current directory, please precede it with "./" prefix,  in
              order to avoid confusion with a nickname.

              (Schannel  only)  Client  certificates must be specified by a path expression to a certificate store. (Loading
              PFX is  not  supported;  you  can  import  it  to  a  store  first).  You  can  use  "<store  location>\<store
              name>\<thumbprint>"  to  refer  to  a  certificate  in  the  system  certificates store, for example, "Curren‐
              tUser\MY\934a7ac6f8a5d579285a74fa61e19f23ddfe8d7a". Thumbprint is usually a SHA-1 hex string which you can see
              in  certificate  details.  Following store locations are supported: CurrentUser, LocalMachine, CurrentService,
              Services, CurrentUserGroupPolicy, LocalMachineGroupPolicy, LocalMachineEnterprise.

              If this option is used several times, the last one will be used.

              See also _-_-_c_e_r_t_-_t_y_p_e and _-_-_k_e_y and _-_-_k_e_y_-_t_y_p_e.

       --ciphers <list of ciphers>
              (TLS) Specifies which ciphers to use in the connection. The list of ciphers must specify valid  ciphers.  Read
              up on SSL cipher list details on this URL:

               https://curl.haxx.se/docs/ssl-ciphers.html

              If this option is used several times, the last one will be used.

       --compressed-ssh
              (SCP  SFTP)  Enables  built-in SSH compression.  This is a request, not an order; the server may or may not do
              it.

              Added in 7.56.0.

       --compressed
              (HTTP) Request a compressed response using one of the algorithms curl supports, and save the uncompressed doc‐
              ument.  If this option is used and the server sends an unsupported encoding, curl will report an error.

       -K, --config <file>

              Specify  a  text  file  to read curl arguments from. The command line arguments found in the text file will be
              used as if they were provided on the command line.

              Options and their parameters must be specified on the same line in the file, separated by  whitespace,  colon,
              or  the  equals  sign. Long option names can optionally be given in the config file without the initial double
              dashes and if so, the colon or equals characters can be used as separators. If the option  is  specified  with
              one or two dashes, there can be no colon or equals character between the option and its parameter.

              If  the  parameter  contains whitespace (or starts with : or =), the parameter must be enclosed within quotes.
              Within double quotes, the following escape sequences are available: \\, \", \t, \n, \r  and  \v.  A  backslash
              preceding  any  other  letter is ignored. If the first column of a config line is a '#' character, the rest of
              the line will be treated as a comment. Only write one option per physical line in the config file.

              Specify the filename to _-_K_, _-_-_c_o_n_f_i_g as '-' to make curl read the file from stdin.

              Note that to be able to specify a URL in the config file, you need to specify it using the _-_-_u_r_l  option,  and
              not by simply writing the URL on its own line. So, it could look similar to this:

              url = "https://curl.haxx.se/docs/"

              When curl is invoked, it (unless _-_q_, _-_-_d_i_s_a_b_l_e is used) checks for a default config file and uses it if found.
              The default config file is checked for in the following places in this order:

              1) curl tries to find the "home dir": It first checks for the CURL_HOME and then the  HOME  environment  vari‐
              ables.  Failing  that,  it  uses getpwuid() on Unix-like systems (which returns the home dir given the current
              user in your system). On Windows, it then checks for the APPDATA variable, or as a last resort the  '%USERPRO‐
              FILE%\Application Data'.

              2)  On  windows,  if there is no .curlrc file in the home dir, it checks for one in the same dir the curl exe‐
              cutable is placed. On Unix-like systems, it will simply try to load .curlrc from the determined home dir.

              # --- Example file ---
              # this is a comment
              url = "example.com"
              output = "curlhere.html"
              user-agent = "superagent/1.0"

              # and fetch another URL too
              url = "example.com/docs/manpage.html"
              -O
              referer = "http://nowhereatall.example.com/"
              # --- End of example file ---

              This option can be used multiple times to load multiple config files.

       --connect-timeout <seconds>
              Maximum time in seconds that you allow curl's connection to take.  This only limits the connection  phase,  so
              if  curl  connects within the given period it will continue - if not it will exit.  Since version 7.32.0, this
              option accepts decimal values.

              If this option is used several times, the last one will be used.

              See also _-_m_, _-_-_m_a_x_-_t_i_m_e.

       --connect-to <HOST1:PORT1:HOST2:PORT2>

              For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.  This option is suitable  to  di‐
              rect  requests  at  a specific server, e.g. at a specific cluster node in a cluster of servers. This option is
              only used to establish the network connection. It does NOT affect the hostname/port that is used  for  TLS/SSL
              (e.g.  SNI,  certificate  verification) or for the application protocols. "HOST1" and "PORT1" may be the empty
              string, meaning "any host/port". "HOST2" and "PORT2" may also be the empty string, meaning "use the  request's
              original host/port".

              A  "host" specified to this option is compared as a string, so it needs to match the name used in request URL.
              It can be either numerical such as "127.0.0.1" or the full host name such as "example.org".

              This option can be used many times to add many connect rules.

              See also _-_-_r_e_s_o_l_v_e and _-_H_, _-_-_h_e_a_d_e_r. Added in 7.49.0.

       -C, --continue-at <offset>
              Continue/Resume a previous file transfer at the given offset. The given offset is the exact  number  of  bytes
              that  will be skipped, counting from the beginning of the source file before it is transferred to the destina‐
              tion.  If used with uploads, the FTP server command SIZE will not be used by curl.

              Use "-C -" to tell curl to automatically find out where/how to resume the transfer. It  then  uses  the  given
              output/input files to figure that out.

              If this option is used several times, the last one will be used.

              See also _-_r_, _-_-_r_a_n_g_e.

       -c, --cookie-jar <filename>
              (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation. Curl writes all
              cookies from its in-memory cookie storage to the given file at the end of operations. If no cookies are known,
              no  data  will be written. The file will be written using the Netscape cookie file format. If you set the file
              name to a single dash, "-", the cookies will be written to stdout.

              This command line option will activate the cookie engine that makes curl record and use cookies.  Another  way
              to activate it is to use the _-_b_, _-_-_c_o_o_k_i_e option.

              If  the cookie jar can't be created or written to, the whole curl operation won't fail or even report an error
              clearly. Using _-_v_, _-_-_v_e_r_b_o_s_e will get a warning displayed, but that is the only visible feedback you get about
              this possibly lethal situation.

              If this option is used several times, the last specified file name will be used.

       -b, --cookie <data|filename>
              (HTTP)  Pass  the  data to the HTTP server in the Cookie header. It is supposedly the data previously received
              from the server in a "Set-Cookie:" line.  The data should be in the format "NAME1=VALUE1; NAME2=VALUE2".

              If no '=' symbol is used in the argument, it is instead treated as a filename to read previously stored cookie
              from.  This option also activates the cookie engine which will make curl record incoming cookies, which may be
              handy if you're using this in combination with the _-_L_, _-_-_l_o_c_a_t_i_o_n option or do multiple URL transfers  on  the
              same invoke. If the file name is exactly a minus ("-"), curl will instead the contents from stdin.

              The  file  format of the file to read cookies from should be plain HTTP headers (Set-Cookie style) or the Net‐
              scape/Mozilla cookie file format.

              The file specified with _-_b_, _-_-_c_o_o_k_i_e is only used as input. No cookies will be written to the file.  To  store
              cookies, use the _-_c_, _-_-_c_o_o_k_i_e_-_j_a_r option.

              Exercise  caution if you are using this option and multiple transfers may occur.  If you use the NAME1=VALUE1;
              format, or in a file use the Set-Cookie format and don't specify a domain, then the cookie is sent for any do‐
              main  (even  after redirects are followed) and cannot be modified by a server-set cookie. If the cookie engine
              is enabled and a server sets a cookie of the same name then both will be sent on a  future  transfer  to  that
              server, likely not what you intended.  To address these issues set a domain in Set-Cookie (doing that will in‐
              clude sub domains) or use the Netscape format.

              If this option is used several times, the last one will be used.

              Users very often want to both read cookies from a file and write updated cookies back to a file, so using both
              _-_b_, _-_-_c_o_o_k_i_e and _-_c_, _-_-_c_o_o_k_i_e_-_j_a_r in the same command line is common.

       --create-dirs
              When  used in conjunction with the _-_o_, _-_-_o_u_t_p_u_t option, curl will create the necessary local directory hierar‐
              chy as needed. This option creates the dirs mentioned with the _-_o_,  _-_-_o_u_t_p_u_t  option,  nothing  else.  If  the
              --output file name uses no dir or if the dirs it mentions already exist, no dir will be created.

              To create remote directories when using FTP or SFTP, try _-_-_f_t_p_-_c_r_e_a_t_e_-_d_i_r_s.

       --crlf (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).

              (SMTP added in 7.40.0)

       --crlfile <file>
              (TLS)  Provide  a  file using PEM format with a Certificate Revocation List that may specify peer certificates
              that are to be considered revoked.

              If this option is used several times, the last one will be used.

              Added in 7.19.7.

       --data-ascii <data>
              (HTTP) This is just an alias for _-_d_, _-_-_d_a_t_a.

       --data-binary <data>
              (HTTP) This posts data exactly as specified with no extra processing whatsoever.

              If you start the data with the letter @, the rest should be a filename.  Data is posted in a similar manner as
              _-_d_, _-_-_d_a_t_a does, except that newlines and carriage returns are preserved and conversions are never done.

              Like  _-_d_, _-_-_d_a_t_a the default content-type sent to the server is application/x-www-form-urlencoded. If you want
              the data to be treated as arbitrary binary data by the server then set the content-type  to  octet-stream:  -H
              "Content-Type: application/octet-stream".

              If  this  option  is  used  several  times,  the ones following the first will append data as described in _-_d_,
              _-_-_d_a_t_a.

       --data-raw <data>
              (HTTP) This posts data similarly to _-_d_, _-_-_d_a_t_a but without the special interpretation of the @ character.

              See also _-_d_, _-_-_d_a_t_a. Added in 7.43.0.

       --data-urlencode <data>
              (HTTP) This posts data, similar to the other _-_d_, _-_-_d_a_t_a options with the exception that this performs  URL-en‐
              coding.

              To be CGI-compliant, the <data> part should begin with a _n_a_m_e followed by a separator and a content specifica‐
              tion. The <data> part can be passed to curl using one of the following syntaxes:

              content
                     This will make curl URL-encode the content and pass that on.  Just  be  careful  so  that  the  content
                     doesn't  contain any = or @ symbols, as that will then make the syntax match one of the other cases be‐
                     low!

              =content
                     This will make curl URL-encode the content and pass that on. The preceding = symbol is not included  in
                     the data.

              name=content
                     This  will  make curl URL-encode the content part and pass that on. Note that the name part is expected
                     to be URL-encoded already.

              @filename
                     This will make curl load data from the given file (including any newlines), URL-encode  that  data  and
                     pass it on in the POST.

              name@filename
                     This  will  make  curl load data from the given file (including any newlines), URL-encode that data and
                     pass it on in the POST. The name part gets an equal sign appended, resulting  in  _n_a_m_e_=_u_r_l_e_n_c_o_d_e_d_-_f_i_l_e_-
                     _c_o_n_t_e_n_t. Note that the name is expected to be URL-encoded already.

       See also _-_d_, _-_-_d_a_t_a and _-_-_d_a_t_a_-_r_a_w. Added in 7.18.0.

       -d, --data <data>
              (HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when
              a user has filled in an HTML form and presses the submit button. This will cause curl to pass the data to  the
              server using the content-type application/x-www-form-urlencoded.  Compare to _-_F_, _-_-_f_o_r_m.

              _-_-_d_a_t_a_-_r_a_w  is  almost  the  same  but does not have a special interpretation of the @ character. To post data
              purely binary, you should instead use the _-_-_d_a_t_a_-_b_i_n_a_r_y option.  To URL-encode the value of a form  field  you
              may use _-_-_d_a_t_a_-_u_r_l_e_n_c_o_d_e.

              If  any  of  these  options is used more than once on the same command line, the data pieces specified will be
              merged together with a separating &-symbol. Thus, using '-d name=daniel -d skill=lousy' would generate a  post
              chunk that looks like 'name=daniel&skill=lousy'.

              If  you  start  the  data with the letter @, the rest should be a file name to read the data from, or - if you
              want curl to read the data from stdin. Multiple files can also be specified. Posting data from  a  file  named
              'foobar'  would  thus be done with _-_d_, _-_-_d_a_t_a @foobar. When --data is told to read from a file like that, car‐
              riage returns and newlines will be stripped out. If you don't want the @ character to have a special interpre‐
              tation use _-_-_d_a_t_a_-_r_a_w instead.

              See  also  _-_-_d_a_t_a_-_b_i_n_a_r_y  and _-_-_d_a_t_a_-_u_r_l_e_n_c_o_d_e and _-_-_d_a_t_a_-_r_a_w. This option overrides _-_F_, _-_-_f_o_r_m and _-_I_, _-_-_h_e_a_d
              and _-_T_, _-_-_u_p_l_o_a_d_-_f_i_l_e.

       --delegation <LEVEL>
              (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.

              none   Don't allow any delegation.

              policy Delegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a mat‐
                     ter of realm policy.

              always Unconditionally allow the server to delegate.

       --digest
              (HTTP)  Enables  HTTP  Digest authentication. This is an authentication scheme that prevents the password from
              being sent over the wire in clear text. Use this in combination with the normal _-_u_, _-_-_u_s_e_r option to set  user
              name and password.

              If this option is used several times, only the first one is used.

              See  also  _-_u_, _-_-_u_s_e_r and _-_-_p_r_o_x_y_-_d_i_g_e_s_t and _-_-_a_n_y_a_u_t_h. This option overrides _-_-_b_a_s_i_c and _-_-_n_t_l_m and _-_-_n_e_g_o_t_i_‐
              _a_t_e.

       --disable-eprt
              (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP  transfers.  Curl  will
              normally always first attempt to use EPRT, then LPRT before using PORT, but with this option, it will use PORT
              right away. EPRT and LPRT are extensions to the original FTP protocol, and may not work on  all  servers,  but
              they enable more functionality in a better way than the traditional PORT command.

              --eprt can be used to explicitly enable EPRT again and --no-eprt is an alias for _-_-_d_i_s_a_b_l_e_-_e_p_r_t.

              If the server is accessed using IPv6, this option will have no effect as EPRT is necessary then.

              Disabling EPRT only changes the active behavior. If you want to switch to passive mode you need to not use _-_P_,
              _-_-_f_t_p_-_p_o_r_t or force it with _-_-_f_t_p_-_p_a_s_v.

       --disable-epsv
              (FTP) (FTP) Tell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will  nor‐
              mally always first attempt to use EPSV before PASV, but with this option, it will not try using EPSV.

              --epsv can be used to explicitly enable EPSV again and --no-epsv is an alias for _-_-_d_i_s_a_b_l_e_-_e_p_s_v.

              If the server is an IPv6 host, this option will have no effect as EPSV is necessary then.

              Disabling  EPSV  only  changes  the passive behavior. If you want to switch to active mode you need to use _-_P_,
              _-_-_f_t_p_-_p_o_r_t.

       -q, --disable
              If used as the first parameter on the command line, the _c_u_r_l_r_c config file will not be read and used. See  the
              _-_K_, _-_-_c_o_n_f_i_g for details on the default config file search path.

       --disallow-username-in-url
              (HTTP) This tells curl to exit if passed a url containing a username.

              See also _-_-_p_r_o_t_o. Added in 7.61.0.

       --dns-interface <interface>
              (DNS) Tell curl to send outgoing DNS requests through <interface>. This option is a counterpart to _-_-_i_n_t_e_r_f_a_c_e
              (which does not affect DNS). The supplied string must be an interface name (not an address).

              See also _-_-_d_n_s_-_i_p_v_4_-_a_d_d_r and _-_-_d_n_s_-_i_p_v_6_-_a_d_d_r. _-_-_d_n_s_-_i_n_t_e_r_f_a_c_e requires that the underlying libcurl  was  built
              to support c-ares. Added in 7.33.0.

       --dns-ipv4-addr <address>
              (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from
              this address. The argument should be a single IPv4 address.

              See also _-_-_d_n_s_-_i_n_t_e_r_f_a_c_e and _-_-_d_n_s_-_i_p_v_6_-_a_d_d_r. _-_-_d_n_s_-_i_p_v_4_-_a_d_d_r requires that the underlying libcurl  was  built
              to support c-ares. Added in 7.33.0.

       --dns-ipv6-addr <address>
              (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from
              this address. The argument should be a single IPv6 address.

              See also _-_-_d_n_s_-_i_n_t_e_r_f_a_c_e and _-_-_d_n_s_-_i_p_v_4_-_a_d_d_r. _-_-_d_n_s_-_i_p_v_6_-_a_d_d_r requires that the underlying libcurl  was  built
              to support c-ares. Added in 7.33.0.

       --dns-servers <addresses>
              Set the list of DNS servers to be used instead of the system default.  The list of IP addresses should be sep‐
              arated with commas. Port numbers may also optionally be given as _:_<_p_o_r_t_-_n_u_m_b_e_r_> after each IP address.

              _-_-_d_n_s_-_s_e_r_v_e_r_s requires that the underlying libcurl was built to support c-ares. Added in 7.33.0.

       --doh-url <URL>
              (all) Specifies which DNS-over-HTTPS (DOH) server to use to resolve hostnames, instead of  using  the  default
              name resolver mechanism. The URL must be HTTPS.

              If this option is used several times, the last one will be used.

              Added in 7.62.0.

       -D, --dump-header <filename>
              (HTTP FTP) Write the received protocol headers to the specified file.

              This  option  is  handy to use when you want to store the headers that an HTTP site sends to you. Cookies from
              the headers could then be read in a second curl invocation by using the _-_b_, _-_-_c_o_o_k_i_e option! The _-_c_, _-_-_c_o_o_k_i_e_-
              _j_a_r option is a better way to store cookies.

              If no headers are received, the use of this option will create an empty file.

              When used in FTP, the FTP server response lines are considered being "headers" and thus are saved there.

              If this option is used several times, the last one will be used.

              See also _-_o_, _-_-_o_u_t_p_u_t.

       --egd-file <file>
              (TLS)  Specify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random en‐
              gine for SSL connections.

              See also _-_-_r_a_n_d_o_m_-_f_i_l_e.

       --engine <name>
              (TLS) Select the OpenSSL crypto engine to use for cipher operations. Use _-_-_e_n_g_i_n_e list  to  print  a  list  of
              build-time supported engines. Note that not all (or none) of the engines may be available at run-time.

       --etag-compare <file>
              (HTTP)  This option makes a conditional HTTP request for the specific ETag read from the given file by sending
              a custom If-None-Match header using the extracted ETag.

              For correct results, make sure that specified file contains only a single line with a desired ETag.  An  empty
              file is parsed as an empty ETag.

              Use  the  option _-_-_e_t_a_g_-_s_a_v_e to first save the ETag from a response, and then use this option to compare using
              the saved ETag in a subsequent request.

              OMPARISON: There are 2 types of comparison or ETags, Weak and Strong.  This option expects, and uses a  strong
              comparison.

              Added in 7.68.0.

       --etag-save <file>
              (HTTP) This option saves an HTTP ETag to the specified file. Etag is usually part of headers returned by a re‐
              quest. When server sends an ETag, it must be enveloped by a double quote. This option extracts the ETag  with‐
              out the double quotes and saves it into the <file>.

              A  server can send a week ETag which is prefixed by "W/". This identifier is not considered, and only relevant
              ETag between quotation marks is parsed.

              It an ETag wasn't send by the server or it cannot be parsed, and empty file is created.

              Added in 7.68.0.

       --expect100-timeout <seconds>
              (HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an  Ex‐
              pects:  100-continue  header in its request. By default curl will wait one second. This option accepts decimal
              values! When curl stops waiting, it will continue as if the response has been received.

              See also _-_-_c_o_n_n_e_c_t_-_t_i_m_e_o_u_t. Added in 7.47.0.

       --fail-early
              Fail and exit on the first detected transfer error.

              When curl is used to do multiple transfers on the command line, it will attempt to operate on each given  URL,
              one by one. By default, it will ignore errors if there are more URLs given and the last URL's success will de‐
              termine the error code curl returns. So early failures will be "hidden" by subsequent successful transfers.

              Using this option, curl will instead return an error on the first transfer  that  fails,  independent  of  the
              amount of URLs that are given on the command line. This way, no transfer failures go undetected by scripts and
              similar.

              This option is global and does not need to be specified for each use of _-_:_, _-_-_n_e_x_t.

              This option does not imply _-_f_, _-_-_f_a_i_l, which causes transfers to fail due to the server's  HTTP  status  code.
              You  can  combine  the  two  options,  however note _-_f_, _-_-_f_a_i_l is not global and is therefore contained by _-_:_,
              _-_-_n_e_x_t.

              Added in 7.52.0.

       -f, --fail
              (HTTP) Fail silently (no output at all) on server errors. This is mostly done to better enable scripts etc  to
              better  deal with failed attempts. In normal cases when an HTTP server fails to deliver a document, it returns
              an HTML document stating so (which often also describes why and more). This flag will prevent curl  from  out‐
              putting that and return error 22.

              This  method  is  not fail-safe and there are occasions where non-successful response codes will slip through,
              especially when authentication is involved (response codes 401 and 407).

       --false-start
              (TLS) Tells curl to use false start during the TLS handshake. False start is a mode where a  TLS  client  will
              start  sending  application data before verifying the server's Finished message, thus saving a round trip when
              performing a full handshake.

              This is currently only implemented in the NSS and Secure Transport (on iOS 7.0 or  later,  or  OS  X  10.9  or
              later) backends.

              Added in 7.42.0.

       --form-string <name=string>
              (HTTP SMTP IMAP) Similar to _-_F_, _-_-_f_o_r_m except that the value string for the named parameter is used literally.
              Leading '@' and '<' characters, and the ';type=' string in the value have no  special  meaning.  Use  this  in
              preference  to _-_F_, _-_-_f_o_r_m if there's any possibility that the string value may accidentally trigger the '@' or
              '<' features of _-_F_, _-_-_f_o_r_m.

              See also _-_F_, _-_-_f_o_r_m.

       -F, --form <name=content>
              (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed
              the  submit  button. This causes curl to POST data using the Content-Type multipart/form-data according to RFC
              2388.

              For SMTP and IMAP protocols, this is the mean to compose a multipart mail message to transmit.

              This enables uploading of binary files etc. To force the 'content' part to be a file,  prefix  the  file  name
              with  an @ sign. To just get the content part from a file, prefix the file name with the symbol <. The differ‐
              ence between @ and < is then that @ makes a file get attached in the post as a file upload, while the <  makes
              a text field and just get the contents for that text field from a file.

              Tell curl to read content from stdin instead of a file by using - as filename. This goes for both @ and < con‐
              structs. When stdin is used, the contents is buffered in memory first by curl to determine its size and  allow
              a  possible resend.  Defining a part's data from a named non-regular file (such as a named pipe or similar) is
              unfortunately not subject to buffering and will be effectively read at transmission time; since the full  size
              is unknown before the transfer starts, such data is sent as chunks by HTTP and rejected by IMAP.

              Example: send an image to an HTTP server, where 'profile' is the name of the form-field to which the file por‐
              trait.jpg will be the input:

               curl -F profile=@portrait.jpg https://example.com/upload.cgi

              Example: send a your name and shoe size in two text fields to the server:

               curl -F name=John -F shoesize=11 https://example.com/

              Example: send a your essay in a text field to the server. Send it as a plain text field, but get the  contents
              for it from a local file:

               curl -F "story=<hugefile.txt" https://example.com/

              You can also tell curl what Content-Type to use by using 'type=', in a manner similar to:

               curl -F "web=@index.html;type=text/html" example.com

              or

               curl -F "name=daniel;type=text/foo" example.com

              You can also explicitly change the name field of a file upload part by setting filename=, like this:

               curl -F "file=@localfile;filename=nameinpost" example.com

              If filename/path contains ',' or ';', it must be quoted by double-quotes like:

               curl -F "file=@\"localfile\";filename=\"nameinpost\"" example.com

              or

               curl -F 'file=@"localfile";filename="nameinpost"' example.com

              Note  that  if  a  filename/path is quoted by double-quotes, any double-quote or backslash within the filename
              must be escaped by backslash.

              Quoting must also be applied to non-file data if it contains semicolons, leading/trailing  spaces  or  leading
              double quotes:

               curl -F 'colors="red; green; blue";type=text/x-myapp' example.com

              You can add custom headers to the field by setting headers=, like

                curl -F "submit=OK;headers=\"X-submit-type: OK\"" example.com

              or

                curl -F "submit=OK;headers=@headerfile" example.com

              The headers= keyword may appear more that once and above notes about quoting apply. When headers are read from
              a file, Empty lines and lines starting with '#' are comments and ignored; each header can be folded by  split‐
              ting between two words and starting the continuation line with a space; embedded carriage-returns and trailing
              spaces are stripped.  Here is an example of a header file contents:

                # This file contain two headers.
                X-header-1: this is a header

                # The following header is folded.
                X-header-2: this is
                 another header

              To support sending multipart mail messages, the syntax is extended as follows:
              - name can be omitted: the equal sign is the first character of the argument,
              - if data starts with '(', this signals to start a new multipart: it can be followed by a content type  speci‐
              fication.
              - a multipart can be terminated with a '=)' argument.

              Example:  the following command sends an SMTP mime e-mail consisting in an inline part in two alternative for‐
              mats: plain text and HTML. It attaches a text file:

               curl -F '=(;type=multipart/alternative' \
                       -F '=plain text message' \
                       -F '= <body>HTML message</body>;type=text/html' \
                    -F '=)' -F '=@textfile.txt' ...  smtp://example.com

              Data can be encoded for transfer using encoder=. Available encodings are _b_i_n_a_r_y and _8_b_i_t that do nothing  else
              than adding the corresponding Content-Transfer-Encoding header, _7_b_i_t that only rejects 8-bit characters with a
              transfer error, _q_u_o_t_e_d_-_p_r_i_n_t_a_b_l_e and _b_a_s_e_6_4 that encodes data according to the corresponding schemes, limiting
              lines length to 76 characters.

              Example: send multipart mail with a quoted-printable text message and a base64 attached file:

               curl -F '=text message;encoder=quoted-printable' \
                    -F '=@localfile;encoder=base64' ... smtp://example.com

              See further examples and details in the MANUAL.

              This option can be used multiple times.

              This option overrides _-_d_, _-_-_d_a_t_a and _-_I_, _-_-_h_e_a_d and _-_T_, _-_-_u_p_l_o_a_d_-_f_i_l_e.

       --ftp-account <data>
              (FTP)  When an FTP server asks for "account data" after user name and password has been provided, this data is
              sent off using the ACCT command.

              If this option is used several times, the last one will be used.

              Added in 7.13.0.

       --ftp-alternative-to-user <command>
              (FTP) If authenticating with the USER and PASS commands fails, send this command.  When connecting to  Tumble‐
              weed's Secure Transport server over FTPS using a client certificate, using "SITE AUTH" will tell the server to
              retrieve the username from the certificate.

              Added in 7.15.5.

       --ftp-create-dirs
              (FTP SFTP) When an FTP or SFTP URL/operation uses a path that doesn't currently exist on the server, the stan‐
              dard behavior of curl is to fail. Using this option, curl will instead attempt to create missing directories.

              See also _-_-_c_r_e_a_t_e_-_d_i_r_s.

       --ftp-method <method>
              (FTP)  Control  what method curl should use to reach a file on an FTP(S) server. The method argument should be
              one of the following alternatives:

              multicwd
                     curl does a single CWD operation for each path part in the given URL. For deep hierarchies  this  means
                     very  many  commands.  This is how RFC 1738 says it should be done. This is the default but the slowest
                     behavior.

              nocwd  curl does no CWD at all. curl will do SIZE, RETR, STOR etc and give a full path to the server  for  all
                     these commands. This is the fastest behavior.

              singlecwd
                     curl  does one CWD with the full target directory and then operates on the file "normally" (like in the
                     multicwd case). This is somewhat more standards compliant than 'nocwd' but without the full penalty  of
                     'multicwd'.

       Added in 7.15.1.

       --ftp-pasv
              (FTP)  Use  passive mode for the data connection. Passive is the internal default behavior, but using this op‐
              tion can be used to override a previous _-_P_, _-_-_f_t_p_-_p_o_r_t option.

              If this option is used several times, only the first one is used. Undoing an  enforced  passive  really  isn't
              doable but you must then instead enforce the correct _-_P_, _-_-_f_t_p_-_p_o_r_t again.

              Passive mode means that curl will try the EPSV command first and then PASV, unless _-_-_d_i_s_a_b_l_e_-_e_p_s_v is used.

              See also _-_-_d_i_s_a_b_l_e_-_e_p_s_v. Added in 7.11.0.

       -P, --ftp-port <address>
              (FTP)  Reverses  the default initiator/listener roles when connecting with FTP. This option makes curl use ac‐
              tive mode. curl then tells the server to connect back to the client's specified address and port,  while  pas‐
              sive mode asks the server to setup an IP address and port for it to connect to. <address> should be one of:

              interface
                     e.g. "eth0" to specify which interface's IP address you want to use (Unix only)

              IP address
                     e.g. "192.168.10.1" to specify the exact IP address

              host name
                     e.g. "my.host.domain" to specify the machine

              -      make curl pick the same IP address that is already used for the control connection

       If this option is used several times, the last one will be used. Disable the use of PORT with _-_-_f_t_p_-_p_a_s_v. Disable the
       attempt to use the EPRT command instead of PORT by using _-_-_d_i_s_a_b_l_e_-_e_p_r_t. EPRT is really PORT++.

       Since 7.19.5, you can append ":[start]-[end]" to the right of the address, to tell curl what TCP port range  to  use.
       That means you specify a port range, from a lower to a higher number. A single number works as well, but do note that
       it increases the risk of failure since the port may not be available.

       See also _-_-_f_t_p_-_p_a_s_v and _-_-_d_i_s_a_b_l_e_-_e_p_r_t.

       --ftp-pret
              (FTP) Tell curl to send a PRET command before PASV (and EPSV). Certain FTP  servers,  mainly  drftpd,  require
              this non-standard command for directory listings as well as up and downloads in PASV mode.

              Added in 7.20.0.

       --ftp-skip-pasv-ip
              (FTP) Tell curl to not use the IP address the server suggests in its response to curl's PASV command when curl
              connects the data connection. Instead curl will re-use the same IP address it already  uses  for  the  control
              connection.

              This option has no effect if PORT, EPRT or EPSV is used instead of PASV.

              See also _-_-_f_t_p_-_p_a_s_v. Added in 7.14.2.

       --ftp-ssl-ccc-mode <active/passive>
              (FTP)  Sets  the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to
              do it, and will not reply to the shutdown from the server. The active mode initiates the  shutdown  and  waits
              for a reply from the server.

              See also _-_-_f_t_p_-_s_s_l_-_c_c_c. Added in 7.16.2.

       --ftp-ssl-ccc
              (FTP)  Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. The rest of the con‐
              trol channel communication will be unencrypted. This allows NAT routers to follow the FTP transaction. The de‐
              fault mode is passive.

              See also _-_-_s_s_l and _-_-_f_t_p_-_s_s_l_-_c_c_c_-_m_o_d_e. Added in 7.16.1.

       --ftp-ssl-control
              (FTP)  Require SSL/TLS for the FTP login, clear for transfer.  Allows secure authentication, but non-encrypted
              data transfers for efficiency.  Fails the transfer if the server doesn't support SSL/TLS.

              Added in 7.16.0.

       -G, --get
              When used, this option will make all data specified with _-_d_, _-_-_d_a_t_a, _-_-_d_a_t_a_-_b_i_n_a_r_y or _-_-_d_a_t_a_-_u_r_l_e_n_c_o_d_e  to  be
              used  in  an  HTTP  GET request instead of the POST request that otherwise would be used. The data will be ap‐
              pended to the URL with a '?' separator.

              If used in combination with _-_I_, _-_-_h_e_a_d, the POST data will instead be appended to the URL with a HEAD request.

              If this option is used several times, only the first one is used. This is because undoing a GET  doesn't  make
              sense, but you should then instead enforce the alternative method you prefer.

       -g, --globoff
              This  option  switches off the "URL globbing parser". When you set this option, you can specify URLs that con‐
              tain the letters {}[] without having them being interpreted by curl itself. Note that these  letters  are  not
              normal legal URL contents but they should be encoded according to the URI standard.

       --happy-eyeballs-timeout-ms <milliseconds>
              Happy  eyeballs is an algorithm that attempts to connect to both IPv4 and IPv6 addresses for dual-stack hosts,
              preferring IPv6 first for the number of milliseconds. If the IPv6 address cannot be connected to  within  that
              time then a connection attempt is made to the IPv4 address in parallel. The first connection to be established
              is the one that is used.

              The range of suggested useful values is limited. Happy Eyeballs RFC 6555 says "It is RECOMMENDED that  connec‐
              tion  attempts be paced 150-250 ms apart to balance human factors against network load." libcurl currently de‐
              faults to 200 ms. Firefox and Chrome currently default to 300 ms.

              If this option is used several times, the last one will be used.

              Added in 7.59.0.

       --haproxy-protocol
              (HTTP) Send a HAProxy PROXY protocol v1 header at the beginning of the connection. This is used by  some  load
              balancers and reverse proxies to indicate the client's true IP address and port.

              This option is primarily useful when sending test requests to a service that expects this header.

              Added in 7.60.0.

       -I, --head
              (HTTP  FTP  FILE) Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing
              but the header of a document. When used on an FTP or FILE file, curl displays the file size and last modifica‐
              tion time only.

       -H, --header <header/@file>
              (HTTP) Extra header to include in the request when sending HTTP to a server. You may specify any number of ex‐
              tra headers. Note that if you should add a custom header that has the same name as one of  the  internal  ones
              curl  would  use, your externally set header will be used instead of the internal one. This allows you to make
              even trickier stuff than curl would normally do. You should not replace internally set headers without knowing
              perfectly  well  what  you're  doing. Remove an internal header by giving a replacement without content on the
              right side of the colon, as in: -H "Host:". If you send the custom header with no-value then its  header  must
              be terminated with a semicolon, such as -H "X-Custom-Header;" to send "X-Custom-Header:".

              curl  will  make  sure that each header you add/replace is sent with the proper end-of-line marker, you should
              thus nnoott add that as a part of the header content: do not add newlines or carriage  returns,  they  will  only
              mess things up for you.

              Starting  in  7.55.0,  this  option can take an argument in @filename style, which then adds a header for each
              line in the input file. Using @- will make curl read the header file from stdin.

              See also the _-_A_, _-_-_u_s_e_r_-_a_g_e_n_t and _-_e_, _-_-_r_e_f_e_r_e_r options.

              Starting in 7.37.0, you need _-_-_p_r_o_x_y_-_h_e_a_d_e_r to send custom headers intended for a proxy.

              Example:

               curl -H "X-First-Name: Joe" http://example.com/

              WWAARRNNIINNGG: headers set with this option will be set in all requests - even after redirects  are  followed,  like
              when  told  with _-_L_, _-_-_l_o_c_a_t_i_o_n. This can lead to the header being sent to other hosts than the original host,
              so sensitive headers should be used with caution combined with following redirects.

              This option can be used multiple times to add/replace/remove multiple headers.

       -h, --help
              Usage help. This lists all current command line options with a short description.

       --hostpubmd5 <md5>
              (SFTP SCP) Pass a string containing 32 hexadecimal digits. The string should be the 128 bit  MD5  checksum  of
              the remote host's public key, curl will refuse the connection with the host unless the md5sums match.

              Added in 7.17.1.

       --http0.9
              (HTTP) Tells curl to be fine with HTTP version 0.9 response.

              HTTP/0.9  is a completely headerless response and therefore you can also connect with this to non-HTTP servers
              and still get a response since curl will simply transparently downgrade - if allowed.

              Since curl 7.66.0, HTTP/0.9 is disabled by default.

       -0, --http1.0
              (HTTP) Tells curl to use HTTP version 1.0 instead of using its internally preferred HTTP version.

              This option overrides _-_-_h_t_t_p_1_._1 and _-_-_h_t_t_p_2.

       --http1.1
              (HTTP) Tells curl to use HTTP version 1.1.

              This option overrides _-_0_, _-_-_h_t_t_p_1_._0 and _-_-_h_t_t_p_2. Added in 7.33.0.

       --http2-prior-knowledge
              (HTTP) Tells curl to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires  prior
              knowledge  that the server supports HTTP/2 straight away. HTTPS requests will still do HTTP/2 the standard way
              with negotiated protocol version in the TLS handshake.

              _-_-_h_t_t_p_2_-_p_r_i_o_r_-_k_n_o_w_l_e_d_g_e requires that the underlying libcurl was built to support HTTP/2.  This  option  over‐
              rides _-_-_h_t_t_p_1_._1 and _-_0_, _-_-_h_t_t_p_1_._0 and _-_-_h_t_t_p_2. Added in 7.49.0.

       --http2
              (HTTP) Tells curl to use HTTP version 2.

              See also _-_-_h_t_t_p_1_._1 and _-_-_h_t_t_p_3. _-_-_h_t_t_p_2 requires that the underlying libcurl was built to support HTTP/2. This
              option overrides _-_-_h_t_t_p_1_._1 and _-_0_, _-_-_h_t_t_p_1_._0 and _-_-_h_t_t_p_2_-_p_r_i_o_r_-_k_n_o_w_l_e_d_g_e. Added in 7.33.0.

       --http3
              (HTTP) WARNING: this option is experimental. Do not use in production.

              Tells curl to use HTTP version 3 directly to the host and port number used in the URL. A normal HTTP/3  trans‐
              action will be done to a host and then get redirected via Alt-SVc, but this option allows a user to circumvent
              that when you know that the target speaks HTTP/3 on the given host and port.

              This option will make curl fail if a QUIC connection cannot be established, it cannot fall  back  to  a  lower
              HTTP version on its own.

              See also _-_-_h_t_t_p_1_._1 and _-_-_h_t_t_p_2. _-_-_h_t_t_p_3 requires that the underlying libcurl was built to support HTTP/3. This
              option overrides _-_-_h_t_t_p_1_._1 and _-_0_, _-_-_h_t_t_p_1_._0 and _-_-_h_t_t_p_2 and _-_-_h_t_t_p_2_-_p_r_i_o_r_-_k_n_o_w_l_e_d_g_e. Added in 7.66.0.

       --ignore-content-length
              (FTP HTTP) For HTTP, Ignore the Content-Length header. This is particularly useful for servers running  Apache
              1.x, which will report incorrect Content-Length for files larger than 2 gigabytes.

              For FTP (since 7.46.0), skip the RETR command to figure out the size before downloading a file.

       -i, --include
              Include  the  HTTP  response  headers  in the output. The HTTP response headers can include things like server
              name, cookies, date of the document, HTTP version and more...

              To view the request headers, consider the _-_v_, _-_-_v_e_r_b_o_s_e option.

              See also _-_v_, _-_-_v_e_r_b_o_s_e.

       -k, --insecure
              (TLS) By default, every SSL connection curl makes is verified to be secure. This option allows curl to proceed
              and operate even for server connections otherwise considered insecure.

              The server connection is verified by making sure the server's certificate contains the right name and verifies
              successfully using the cert store.

              See this online resource for further details:
               https://curl.haxx.se/docs/sslcerts.html

              See also _-_-_p_r_o_x_y_-_i_n_s_e_c_u_r_e and _-_-_c_a_c_e_r_t.

       --interface <name>

              Perform an operation using a specified interface. You can enter interface name, IP address or  host  name.  An
              example could look like:

               curl --interface eth0:1 https://www.example.com/

              If this option is used several times, the last one will be used.

              On  Linux  it  can  be  used to specify a VRF, but the binary needs to either have CAP_NET_RAW or to be run as
              root. More information about Linux VRF: https://www.kernel.org/doc/Documentation/networking/vrf.txt

              See also _-_-_d_n_s_-_i_n_t_e_r_f_a_c_e.

       -4, --ipv4
              This option tells curl to resolve names to IPv4 addresses only, and not for example try IPv6.

              See also _-_-_h_t_t_p_1_._1 and _-_-_h_t_t_p_2. This option overrides _-_6_, _-_-_i_p_v_6.

       -6, --ipv6
              This option tells curl to resolve names to IPv6 addresses only, and not for example try IPv4.

              See also _-_-_h_t_t_p_1_._1 and _-_-_h_t_t_p_2. This option overrides _-_4_, _-_-_i_p_v_4.

       -j, --junk-session-cookies
              (HTTP) When curl is told to read cookies from a given file, this option will  make  it  discard  all  "session
              cookies".  This  will  basically  have the same effect as if a new session is started. Typical browsers always
              discard session cookies when they're closed down.

              See also _-_b_, _-_-_c_o_o_k_i_e and _-_c_, _-_-_c_o_o_k_i_e_-_j_a_r.

       --keepalive-time <seconds>
              This option sets the time a connection needs to remain idle before sending keepalive probes and the  time  be‐
              tween  individual  keepalive  probes. It is currently effective on operating systems offering the TCP_KEEPIDLE
              and TCP_KEEPINTVL socket options (meaning Linux, recent AIX, HP-UX and more). This option  has  no  effect  if
              _-_-_n_o_-_k_e_e_p_a_l_i_v_e is used.

              If  this  option  is  used several times, the last one will be used. If unspecified, the option defaults to 60
              seconds.

              Added in 7.18.0.

       --key-type <type>
              (TLS) Private key file type. Specify which type your _-_-_k_e_y provided private key is. DER, PEM, and ENG are sup‐
              ported. If not specified, PEM is assumed.

              If this option is used several times, the last one will be used.

       --key <key>
              (TLS SSH) Private key file name. Allows you to provide your private key in this separate file. For SSH, if not
              specified, curl tries  the  following  candidates  in  order:  '~/.ssh/id_rsa',  '~/.ssh/id_dsa',  './id_rsa',
              './id_dsa'.

              If  curl  is  built against OpenSSL library, and the engine pkcs11 is available, then a PKCS#11 URI (RFC 7512)
              can be used to specify a private key located in a PKCS#11 device. A string beginning with  "pkcs11:"  will  be
              interpreted  as  a PKCS#11 URI. If a PKCS#11 URI is provided, then the _-_-_e_n_g_i_n_e option will be set as "pkcs11"
              if none was provided and the _-_-_k_e_y_-_t_y_p_e option will be set as "ENG" if none was provided.

              If this option is used several times, the last one will be used.

       --krb <level>
              (FTP) Enable Kerberos authentication and use. The level must be entered and should be one of 'clear',  'safe',
              'confidential', or 'private'. Should you use a level that is not one of these, 'private' will instead be used.

              If this option is used several times, the last one will be used.

              _-_-_k_r_b requires that the underlying libcurl was built to support Kerberos.

       --libcurl <file>
              Append  this  option to any ordinary curl command line, and you will get a libcurl-using C source code written
              to the file that does the equivalent of what your command-line operation does!

              If this option is used several times, the last given file name will be used.

              Added in 7.16.1.

       --limit-rate <speed>
              Specify the maximum transfer rate you want curl to use - for both downloads and uploads. This feature is  use‐
              ful  if  you  have  a  limited  pipe and you'd like your transfer not to use your entire bandwidth. To make it
              slower than it otherwise would be.

              The given speed is measured in bytes/second, unless a suffix is appended.  Appending 'k' or 'K' will count the
              number  as  kilobytes,  'm' or 'M' makes it megabytes, while 'g' or 'G' makes it gigabytes. Examples: 200K, 3m
              and 1G.

              If you also use the _-_Y_, _-_-_s_p_e_e_d_-_l_i_m_i_t option, that option will take precedence and might cripple the rate-lim‐
              iting slightly, to help keeping the speed-limit logic working.

              If this option is used several times, the last one will be used.

       -l, --list-only
              (FTP POP3) (FTP) When listing an FTP directory, this switch forces a name-only view. This is especially useful
              if the user wants to machine-parse the contents of an FTP directory since the normal  directory  view  doesn't
              use  a standard look or format. When used like this, the option causes a NLST command to be sent to the server
              instead of LIST.

              Note: Some FTP servers list only files in their response to NLST; they do not include sub-directories and sym‐
              bolic links.

              (POP3)  When  retrieving a specific email from POP3, this switch forces a LIST command to be performed instead
              of RETR. This is particularly useful if the user wants to see if a specific message id exists  on  the  server
              and what size it is.

              Note:  When  combined with _-_X_, _-_-_r_e_q_u_e_s_t, this option can be used to send an UIDL command instead, so the user
              may use the email's unique identifier rather than it's message id to make the request.

              Added in 7.21.5.

       --local-port <num/range>
              Set a preferred single number or range (FROM-TO) of local port numbers to use  for  the  connection(s).   Note
              that  port  numbers  by nature are a scarce resource that will be busy at times so setting this range to some‐
              thing too narrow might cause unnecessary connection setup failures.

              Added in 7.15.2.

       --location-trusted
              (HTTP) Like _-_L_, _-_-_l_o_c_a_t_i_o_n, but will allow sending the name + password to all hosts that the site may redirect
              to.  This  may or may not introduce a security breach if the site redirects you to a site to which you'll send
              your authentication info (which is plaintext in the case of HTTP Basic authentication).

              See also _-_u_, _-_-_u_s_e_r.

       -L, --location
              (HTTP) If the server reports that the requested page has moved to a different location (indicated with a Loca‐
              tion:  header  and a 3XX response code), this option will make curl redo the request on the new place. If used
              together with _-_i_, _-_-_i_n_c_l_u_d_e or _-_I_, _-_-_h_e_a_d, headers from all requested pages will be shown. When authentication
              is used, curl only sends its credentials to the initial host. If a redirect takes curl to a different host, it
              won't be able to intercept the user+password. See also _-_-_l_o_c_a_t_i_o_n_-_t_r_u_s_t_e_d on how to change this. You can limit
              the amount of redirects to follow by using the _-_-_m_a_x_-_r_e_d_i_r_s option.

              When curl follows a redirect and the request is not a plain GET (for example POST or PUT), it will do the fol‐
              lowing request with a GET if the HTTP response was 301, 302, or 303. If the response code was  any  other  3xx
              code, curl will re-send the following request using the same unmodified method.

              You  can tell curl to not change the non-GET request method to GET after a 30x response by using the dedicated
              options for that: _-_-_p_o_s_t_3_0_1, _-_-_p_o_s_t_3_0_2 and _-_-_p_o_s_t_3_0_3.

       --login-options <options>
              (IMAP POP3 SMTP) Specify the login options to use during server authentication.

              You can use the login options to specify protocol specific options that may be used during authentication.  At
              present  only  IMAP,  POP3 and SMTP support login options. For more information about the login options please
              see RFC 2384, RFC 5092 and IETF draft draft-earhart-url-smtp-00.txt

              If this option is used several times, the last one will be used.

              Added in 7.34.0.

       --mail-auth <address>
              (SMTP) Specify a single address. This will be used to specify the authentication address (identity) of a  sub‐
              mitted message that is being relayed to another server.

              See also _-_-_m_a_i_l_-_r_c_p_t and _-_-_m_a_i_l_-_f_r_o_m. Added in 7.25.0.

       --mail-from <address>
              (SMTP) Specify a single address that the given mail should get sent from.

              See also _-_-_m_a_i_l_-_r_c_p_t and _-_-_m_a_i_l_-_a_u_t_h. Added in 7.20.0.

       --mail-rcpt <address>
              (SMTP)  Specify  a single address, user name or mailing list name. Repeat this option several times to send to
              multiple recipients.

              When performing a mail transfer, the recipient should specify a valid email address to send the mail to.

              When performing an address verification (VRFY command), the recipient should be specified as the user name  or
              user name and domain (as per Section 3.5 of RFC5321). (Added in 7.34.0)

              When performing a mailing list expand (EXPN command), the recipient should be specified using the mailing list
              name, such as "Friends" or "London-Office".  (Added in 7.34.0)

              Added in 7.20.0.

       -M, --manual
              Manual. Display the huge help text.

       --max-filesize <bytes>
              Specify the maximum size (in bytes) of a file to download. If the file requested is larger  than  this  value,
              the transfer will not start and curl will return with exit code 63.

              A  size modifier may be used. For example, Appending 'k' or 'K' will count the number as kilobytes, 'm' or 'M'
              makes it megabytes, while 'g' or 'G' makes it gigabytes. Examples: 200K, 3m and 1G. (Added in 7.58.0)

              NNOOTTEE:: The file size is not always known prior to download, and for such files this option has no  effect  even
              if the file transfer ends up being larger than this given limit. This concerns both FTP and HTTP transfers.

              See also _-_-_l_i_m_i_t_-_r_a_t_e.

       --max-redirs <num>
              (HTTP)  Set  maximum number of redirection-followings allowed. When _-_L_, _-_-_l_o_c_a_t_i_o_n is used, is used to prevent
              curl from following redirections too much. By default, the limit is set to 50 redirections. Set this option to
              -1 to make it unlimited.

              If this option is used several times, the last one will be used.

       -m, --max-time <seconds>
              Maximum  time in seconds that you allow the whole operation to take.  This is useful for preventing your batch
              jobs from hanging for hours due to slow networks or links going down.  Since 7.32.0, this option accepts deci‐
              mal  values,  but  the  actual timeout will decrease in accuracy as the specified timeout increases in decimal
              precision.

              If this option is used several times, the last one will be used.

              See also _-_-_c_o_n_n_e_c_t_-_t_i_m_e_o_u_t.

       --metalink
              This option can tell curl to parse and process a given URI as Metalink file (both version 3 and 4  (RFC  5854)
              are supported) and make use of the mirrors listed within for failover if there are errors (such as the file or
              server not being available). It will also verify the hash of the file after the download completes.  The  Met‐
              alink file itself is downloaded and processed in memory and not stored in the local file system.

              Example to use a remote Metalink file:

               curl --metalink http://www.example.com/example.metalink

              To use a Metalink file in the local file system, use FILE protocol (file://):

               curl --metalink file://example.metalink

              Please  note  that  if  FILE protocol is disabled, there is no way to use a local Metalink file at the time of
              this writing. Also note that if _-_-_m_e_t_a_l_i_n_k and _-_i_, _-_-_i_n_c_l_u_d_e are used together,  --include  will  be  ignored.
              This  is  because including headers in the response will break Metalink parser and if the headers are included
              in the file described in Metalink file, hash check will fail.

              _-_-_m_e_t_a_l_i_n_k requires that the underlying libcurl was built to support metalink. Added in 7.27.0.

       --negotiate
              (HTTP) Enables Negotiate (SPNEGO) authentication.

              This option requires a library built with GSS-API or SSPI support. Use _-_V_, _-_-_v_e_r_s_i_o_n to see if your curl  sup‐
              ports GSS-API/SSPI or SPNEGO.

              When  using  this  option,  you must also provide a fake _-_u_, _-_-_u_s_e_r option to activate the authentication code
              properly. Sending a '-u :' is enough as the user name and password from the _-_u_, _-_-_u_s_e_r option aren't  actually
              used.

              If this option is used several times, only the first one is used.

              See also _-_-_b_a_s_i_c and _-_-_n_t_l_m and _-_-_a_n_y_a_u_t_h and _-_-_p_r_o_x_y_-_n_e_g_o_t_i_a_t_e.

       --netrc-file <filename>
              This  option  is  similar to _-_n_, _-_-_n_e_t_r_c, except that you provide the path (absolute or relative) to the netrc
              file that curl should use.  You can only specify one netrc file per invocation. If  several  _-_-_n_e_t_r_c_-_f_i_l_e  op‐
              tions are provided, the last one will be used.

              It will abide by _-_-_n_e_t_r_c_-_o_p_t_i_o_n_a_l if specified.

              This option overrides _-_n_, _-_-_n_e_t_r_c. Added in 7.21.5.

       --netrc-optional
              Very  similar  to  _-_n_,  _-_-_n_e_t_r_c,  but this option makes the .netrc usage ooppttiioonnaall and not mandatory as the _-_n_,
              _-_-_n_e_t_r_c option does.

              See also _-_-_n_e_t_r_c_-_f_i_l_e. This option overrides _-_n_, _-_-_n_e_t_r_c.

       -n, --netrc
              Makes curl scan the _._n_e_t_r_c (___n_e_t_r_c on Windows) file in the user's home directory for login name and  password.
              This  is typically used for FTP on Unix. If used with HTTP, curl will enable user authentication. See _n_e_t_r_c_(_5_)
              _f_t_p_(_1_) for details on the file format. Curl will not complain if that file doesn't have the right  permissions
              (it  should  not be either world- or group-readable). The environment variable "HOME" is used to find the home
              directory.

              A quick and very simple example of how to setup a _._n_e_t_r_c to allow curl to FTP to the  machine  host.domain.com
              with user name 'myself' and password 'secret' should look similar to:

              mmaacchhiinnee hhoosstt..ddoommaaiinn..ccoomm llooggiinn mmyysseellff ppaasssswwoorrdd sseeccrreett

       -:, --next
              Tells  curl  to use a separate operation for the following URL and associated options. This allows you to send
              several URL requests, each with their own specific options, for example, such as different user names or  cus‐
              tom requests for each.

              _-_:_, _-_-_n_e_x_t will reset all local options and only global ones will have their values survive over to the opera‐
              tion following the _-_:_, _-_-_n_e_x_t instruction. Global options include _-_v_, _-_-_v_e_r_b_o_s_e,  _-_-_t_r_a_c_e,  _-_-_t_r_a_c_e_-_a_s_c_i_i  and
              _-_-_f_a_i_l_-_e_a_r_l_y.

              For example, you can do both a GET and a POST in a single command line:

               curl www1.example.com --next -d postthis www2.example.com

              Added in 7.36.0.

       --no-alpn
              (HTTPS)  Disable  the  ALPN TLS extension. ALPN is enabled by default if libcurl was built with an SSL library
              that supports ALPN. ALPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server
              during https sessions.

              See  also _-_-_n_o_-_n_p_n and _-_-_h_t_t_p_2. _-_-_n_o_-_a_l_p_n requires that the underlying libcurl was built to support TLS. Added
              in 7.36.0.

       -N, --no-buffer
              Disables the buffering of the output stream. In normal work situations, curl will use a standard buffered out‐
              put  stream that will have the effect that it will output the data in chunks, not necessarily exactly when the
              data arrives.  Using this option will disable that buffering.

              Note that this is the negated option name documented. You can thus use --buffer to enforce the buffering.

       --no-keepalive
              Disables the use of keepalive messages on the TCP connection. curl otherwise enables them by default.

              Note that this is the negated option name documented. You can thus use --keepalive to enforce keepalive.

       --no-npn
              (HTTPS) Disable the NPN TLS extension. NPN is enabled by default if libcurl was built with an SSL library that
              supports NPN. NPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during
              https sessions.

              See also _-_-_n_o_-_a_l_p_n and _-_-_h_t_t_p_2. _-_-_n_o_-_n_p_n requires that the underlying libcurl was built to support TLS.  Added
              in 7.36.0.

       --no-progress-meter
              Option to switch off the progress meter output without muting or otherwise affecting warning and informational
              messages like _-_s_, _-_-_s_i_l_e_n_t does.

              Note that this is the negated option name documented. You can thus use --progress-meter to enable the progress
              meter again.

              See also _-_v_, _-_-_v_e_r_b_o_s_e and _-_s_, _-_-_s_i_l_e_n_t. Added in 7.67.0.

       --no-sessionid
              (TLS)  Disable  curl's use of SSL session-ID caching.  By default all transfers are done using the cache. Note
              that while nothing should ever get hurt by attempting to reuse SSL session-IDs, there seem to  be  broken  SSL
              implementations in the wild that may require you to disable this in order for you to succeed.

              Note  that  this  is  the  negated  option name documented. You can thus use --sessionid to enforce session-ID
              caching.

              Added in 7.16.0.

       --noproxy <no-proxy-list>
              Comma-separated list of hosts which do not use a proxy, if one is specified.  The only wildcard is a single  *
              character,  which  matches all hosts, and effectively disables the proxy. Each name in this list is matched as
              either a domain which contains the hostname, or the hostname itself. For example, local.com  would  match  lo‐
              cal.com, local.com:80, and www.local.com, but not www.notlocal.com.

              Since  7.53.0,  This option overrides the environment variables that disable the proxy. If there's an environ‐
              ment variable disabling a proxy, you can set noproxy list to "" to override it.

              Added in 7.19.4.

       --ntlm-wb
              (HTTP) Enables NTLM much in the style _-_-_n_t_l_m does, but hand over the authentication  to  the  separate  binary
              ntlmauth application that is executed when needed.

              See also _-_-_n_t_l_m and _-_-_p_r_o_x_y_-_n_t_l_m.

       --ntlm (HTTP)  Enables  NTLM  authentication. The NTLM authentication method was designed by Microsoft and is used by
              IIS web servers. It is a proprietary protocol, reverse-engineered by clever people  and  implemented  in  curl
              based  on  their efforts. This kind of behavior should not be endorsed, you should encourage everyone who uses
              NTLM to switch to a public and documented authentication method instead, such as Digest.

              If you want to enable NTLM for your proxy authentication, then use _-_-_p_r_o_x_y_-_n_t_l_m.

              If this option is used several times, only the first one is used.

              See also _-_-_p_r_o_x_y_-_n_t_l_m. _-_-_n_t_l_m requires that the underlying libcurl was built to support TLS. This option over‐
              rides _-_-_b_a_s_i_c and _-_-_n_e_g_o_t_i_a_t_e and _-_-_d_i_g_e_s_t and _-_-_a_n_y_a_u_t_h.

       --oauth2-bearer <token>
              (IMAP  POP3  SMTP)  Specify  the Bearer Token for OAUTH 2.0 server authentication. The Bearer Token is used in
              conjunction with the user name which can be specified as part of the _-_-_u_r_l or _-_u_, _-_-_u_s_e_r options.

              The Bearer Token and user name are formatted according to RFC 6750.

              If this option is used several times, the last one will be used.

       -o, --output <file>
              Write output to <file> instead of stdout. If you are using {} or [] to fetch multiple documents, you  can  use
              '#'  followed  by a number in the <file> specifier. That variable will be replaced with the current string for
              the URL being fetched. Like in:

               curl http://{one,two}.example.com -o "file_#1.txt"

              or use several variables like:

               curl http://{site,host}.host[1-5].com -o "#1_#2"

              You may use this option as many times as the number of URLs you have. For example, if you specify two URLs  on
              the same command line, you can use it like this:

                curl -o aa example.com -o bb example.net

              and  the  order of the -o options and the URLs doesn't matter, just that the first -o is for the first URL and
              so on, so the above command line can also be written as

                curl example.com example.net -o aa -o bb

              See also the _-_-_c_r_e_a_t_e_-_d_i_r_s option to create the local directories dynamically. Specifying the output as '-' (a
              single dash) will force the output to be done to stdout.

              See also _-_O_, _-_-_r_e_m_o_t_e_-_n_a_m_e and _-_-_r_e_m_o_t_e_-_n_a_m_e_-_a_l_l and _-_J_, _-_-_r_e_m_o_t_e_-_h_e_a_d_e_r_-_n_a_m_e.

       --parallel-immediate
              When  doing  parallel  transfers,  this option will instruct curl that it should rather prefer opening up more
              connections in parallel at once rather than waiting to see if  new  transfers  can  be  added  as  multiplexed
              streams on another connection.

              See also _-_Z_, _-_-_p_a_r_a_l_l_e_l and _-_-_p_a_r_a_l_l_e_l_-_m_a_x. Added in 7.68.0.

       --parallel-max
              When  asked  to do parallel transfers, using _-_Z_, _-_-_p_a_r_a_l_l_e_l, this option controls the maximum amount of trans‐
              fers to do simultaneously.

              The default is 50.

              See also _-_Z_, _-_-_p_a_r_a_l_l_e_l. Added in 7.66.0.

       -Z, --parallel
              Makes curl perform its transfers in parallel as compared to the regular serial manner.

              Added in 7.66.0.

       --pass <phrase>
              (SSH TLS) Passphrase for the private key

              If this option is used several times, the last one will be used.

       --path-as-is
              Tell curl to not handle sequences of /../ or /./ in the given URL path. Normally curl  will  squash  or  merge
              them according to standards but with this option set you tell it not to do that.

              Added in 7.42.0.

       --pinnedpubkey <hashes>
              (TLS)  Tells curl to use the specified public key file (or hashes) to verify the peer. This can be a path to a
              file which contains a single public key in PEM or DER format, or any number of base64  encoded  sha256  hashes
              preceded by ´sha256//´ and separated by ´;´

              When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key
              is extracted from this certificate and if it does not exactly match the public key provided  to  this  option,
              curl will abort the connection before sending or receiving any data.

              PEM/DER support:
                7.39.0: OpenSSL, GnuTLS and GSKit
                7.43.0: NSS and wolfSSL
                7.47.0: mbedtls sha256 support:
                7.44.0: OpenSSL, GnuTLS, NSS and wolfSSL
                7.47.0: mbedtls Other SSL backends not supported.

              If this option is used several times, the last one will be used.

       --post301
              (HTTP)  Tells  curl to respect RFC 7231/6.4.2 and not convert POST requests into GET requests when following a
              301 redirection. The non-RFC behaviour is ubiquitous in web browsers, so curl does the conversion  by  default
              to  maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This
              option is meaningful only when using _-_L_, _-_-_l_o_c_a_t_i_o_n.

              See also _-_-_p_o_s_t_3_0_2 and _-_-_p_o_s_t_3_0_3 and _-_L_, _-_-_l_o_c_a_t_i_o_n. Added in 7.17.1.

       --post302
              (HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST requests into GET requests when  following  a
              302  redirection.  The non-RFC behaviour is ubiquitous in web browsers, so curl does the conversion by default
              to maintain consistency. However, a server may require a POST to remain a POST after such a redirection.  This
              option is meaningful only when using _-_L_, _-_-_l_o_c_a_t_i_o_n.

              See also _-_-_p_o_s_t_3_0_1 and _-_-_p_o_s_t_3_0_3 and _-_L_, _-_-_l_o_c_a_t_i_o_n. Added in 7.19.1.

       --post303
              (HTTP) Tells curl to violate RFC 7231/6.4.4 and not convert POST requests into GET requests when following 303
              redirections. A server may require a POST to remain a POST after a 303 redirection. This option is  meaningful
              only when using _-_L_, _-_-_l_o_c_a_t_i_o_n.

              See also _-_-_p_o_s_t_3_0_2 and _-_-_p_o_s_t_3_0_1 and _-_L_, _-_-_l_o_c_a_t_i_o_n. Added in 7.26.0.

       --preproxy [protocol://]host[:port]
              Use  the  specified  SOCKS  proxy before connecting to an HTTP or HTTPS _-_x_, _-_-_p_r_o_x_y. In such a case curl first
              connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy. Hence pre proxy.

              The pre proxy string should be specified with a protocol:// prefix to specify alternative proxy protocols. Use
              socks4://,  socks4a://,  socks5:// or socks5h:// to request the specific SOCKS version to be used. No protocol
              specified will make curl default to SOCKS4.

              If the port number is not specified in the proxy string, it is assumed to be 1080.

              User and password that might be provided in the proxy string are URL decoded by curl. This allows you to  pass
              in special characters such as @ by using %40 or pass in a colon with %3a.

              If this option is used several times, the last one will be used.

              Added in 7.52.0.

       -#, --progress-bar
              Make  curl display transfer progress as a simple progress bar instead of the standard, more informational, me‐
              ter.

              This progress bar draws a single line of '#' characters across the screen and shows a percentage if the trans‐
              fer  size  is  known. For transfers without a known size, there will be space ship (-=o=-) that moves back and
              forth but only while data is being transferred, with a set of flying hash sign symbols on top.

       --proto-default <protocol>
              Tells curl to use _p_r_o_t_o_c_o_l for any URL missing a scheme name.

              Example:

               curl --proto-default https ftp.mozilla.org

              An unknown or unsupported protocol causes error _C_U_R_L_E___U_N_S_U_P_P_O_R_T_E_D___P_R_O_T_O_C_O_L (1).

              This option does not change the default proxy protocol (http).

              Without this option curl would make a guess based on the host, see _-_-_u_r_l for details.

              Added in 7.45.0.

       --proto-redir <protocols>
              Tells curl to limit what protocols it may use on redirect. Protocols denied by _-_-_p_r_o_t_o are not  overridden  by
              this option. See --proto for how protocols are represented.

              Example, allow only HTTP and HTTPS on redirect:

               curl --proto-redir -all,http,https http://example.com

              By default curl will allow HTTP, HTTPS, FTP and FTPS on redirect (7.65.2).  Older versions of curl allowed all
              protocols on redirect except several disabled for security reasons: Since 7.19.4 FILE and  SCP  are  disabled,
              and since 7.40.0 SMB and SMBS are also disabled. Specifying _a_l_l or _+_a_l_l enables all protocols on redirect, in‐
              cluding those disabled for security.

              Added in 7.20.2.

       --proto <protocols>
              Tells curl to limit what protocols it may use in the transfer. Protocols are  evaluated  left  to  right,  are
              comma  separated, and are each a protocol name or 'all', optionally prefixed by zero or more modifiers. Avail‐
              able modifiers are:

              ++  Permit this protocol in addition to protocols already permitted (this is the  default  if  no  modifier  is
                 used).

              --  Deny this protocol, removing it from the list of protocols already permitted.

              ==  Permit  only  this  protocol (ignoring the list already permitted), though subject to later modification by
                 subsequent entries in the comma separated list.

              For example:

              _-_-_p_r_o_t_o --ffttppss  uses the default protocols, but disables ftps

              _-_-_p_r_o_t_o --aallll,,hhttttppss,,++hhttttpp
                             only enables http and https

              _-_-_p_r_o_t_o ==hhttttpp,,hhttttppss
                             also only enables http and https

       Unknown protocols produce a warning. This allows scripts to safely rely on being able to disable potentially  danger‐
       ous protocols, without relying upon support for that protocol being built into curl to avoid an error.

       This  option can be used multiple times, in which case the effect is the same as concatenating the protocols into one
       instance of the option.

       See also _-_-_p_r_o_t_o_-_r_e_d_i_r and _-_-_p_r_o_t_o_-_d_e_f_a_u_l_t. Added in 7.20.2.

       --proxy-anyauth
              Tells curl to pick a suitable authentication method when communicating with the given HTTP proxy.  This  might
              cause an extra request/response round-trip.

              See also _-_x_, _-_-_p_r_o_x_y and _-_-_p_r_o_x_y_-_b_a_s_i_c and _-_-_p_r_o_x_y_-_d_i_g_e_s_t. Added in 7.13.2.

       --proxy-basic
              Tells  curl to use HTTP Basic authentication when communicating with the given proxy. Use _-_-_b_a_s_i_c for enabling
              HTTP Basic with a remote host. Basic is the default authentication method curl uses with proxies.

              See also _-_x_, _-_-_p_r_o_x_y and _-_-_p_r_o_x_y_-_a_n_y_a_u_t_h and _-_-_p_r_o_x_y_-_d_i_g_e_s_t.

       --proxy-cacert <file>
              Same as _-_-_c_a_c_e_r_t but used in HTTPS proxy context.

              See also _-_-_p_r_o_x_y_-_c_a_p_a_t_h and _-_-_c_a_c_e_r_t and _-_-_c_a_p_a_t_h and _-_x_, _-_-_p_r_o_x_y. Added in 7.52.0.

       --proxy-capath <dir>
              Same as _-_-_c_a_p_a_t_h but used in HTTPS proxy context.

              See also _-_-_p_r_o_x_y_-_c_a_c_e_r_t and _-_x_, _-_-_p_r_o_x_y and _-_-_c_a_p_a_t_h. Added in 7.52.0.

       --proxy-cert-type <type>
              Same as _-_-_c_e_r_t_-_t_y_p_e but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-cert <cert[:passwd]>
              Same as _-_E_, _-_-_c_e_r_t but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-ciphers <list>
              Same as _-_-_c_i_p_h_e_r_s but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-crlfile <file>
              Same as _-_-_c_r_l_f_i_l_e but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-digest
              Tells curl to use HTTP Digest authentication when communicating with the given proxy.  Use  _-_-_d_i_g_e_s_t  for  en‐
              abling HTTP Digest with a remote host.

              See also _-_x_, _-_-_p_r_o_x_y and _-_-_p_r_o_x_y_-_a_n_y_a_u_t_h and _-_-_p_r_o_x_y_-_b_a_s_i_c.

       --proxy-header <header/@file>
              (HTTP)  Extra header to include in the request when sending HTTP to a proxy. You may specify any number of ex‐
              tra headers. This is the equivalent option to _-_H_, _-_-_h_e_a_d_e_r but is for proxy communication only like in CONNECT
              requests when you want a separate header sent to the proxy to what is sent to the actual remote host.

              curl  will  make  sure that each header you add/replace is sent with the proper end-of-line marker, you should
              thus nnoott add that as a part of the header content: do not add newlines or carriage  returns,  they  will  only
              mess things up for you.

              Headers  specified  with  this  option  will not be included in requests that curl knows will not be sent to a
              proxy.

              Starting in 7.55.0, this option can take an argument in @filename style, which then adds  a  header  for  each
              line in the input file. Using @- will make curl read the header file from stdin.

              This option can be used multiple times to add/replace/remove multiple headers.

              Added in 7.37.0.

       --proxy-insecure
              Same as _-_k_, _-_-_i_n_s_e_c_u_r_e but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-key-type <type>
              Same as _-_-_k_e_y_-_t_y_p_e but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-key <key>
              Same as _-_-_k_e_y but used in HTTPS proxy context.

       --proxy-negotiate
              Tells  curl to use HTTP Negotiate (SPNEGO) authentication when communicating with the given proxy. Use _-_-_n_e_g_o_‐
              _t_i_a_t_e for enabling HTTP Negotiate (SPNEGO) with a remote host.

              See also _-_-_p_r_o_x_y_-_a_n_y_a_u_t_h and _-_-_p_r_o_x_y_-_b_a_s_i_c. Added in 7.17.1.

       --proxy-ntlm
              Tells curl to use HTTP NTLM authentication when communicating with the given proxy. Use  _-_-_n_t_l_m  for  enabling
              NTLM with a remote host.

              See also _-_-_p_r_o_x_y_-_n_e_g_o_t_i_a_t_e and _-_-_p_r_o_x_y_-_a_n_y_a_u_t_h.

       --proxy-pass <phrase>
              Same as _-_-_p_a_s_s but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-pinnedpubkey <hashes>
              (TLS) Tells curl to use the specified public key file (or hashes) to verify the proxy. This can be a path to a
              file which contains a single public key in PEM or DER format, or any number of base64  encoded  sha256  hashes
              preceded by ´sha256//´ and separated by ´;´

              When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key
              is extracted from this certificate and if it does not exactly match the public key provided  to  this  option,
              curl will abort the connection before sending or receiving any data.

              If this option is used several times, the last one will be used.

       --proxy-service-name <name>
              This option allows you to change the service name for proxy negotiation.

              Added in 7.43.0.

       --proxy-ssl-allow-beast
              Same as _-_-_s_s_l_-_a_l_l_o_w_-_b_e_a_s_t but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tls13-ciphers <ciphersuite list>
              (TLS)  Specifies  which cipher suites to use in the connection to your HTTPS proxy when it negotiates TLS 1.3.
              The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:

               https://curl.haxx.se/docs/ssl-ciphers.html

              This option is currently used only when curl is built to use OpenSSL 1.1.1 or later. If you are using  a  dif‐
              ferent SSL backend you can try setting TLS 1.3 cipher suites by using the _-_-_p_r_o_x_y_-_c_i_p_h_e_r_s option.

              If this option is used several times, the last one will be used.

       --proxy-tlsauthtype <type>
              Same as _-_-_t_l_s_a_u_t_h_t_y_p_e but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlspassword <string>
              Same as _-_-_t_l_s_p_a_s_s_w_o_r_d but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsuser <name>
              Same as _-_-_t_l_s_u_s_e_r but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsv1
              Same as _-_1_, _-_-_t_l_s_v_1 but used in HTTPS proxy context.

              Added in 7.52.0.

       -U, --proxy-user <user:password>
              Specify the user name and password to use for proxy authentication.

              If you use a Windows SSPI-enabled curl binary and do either Negotiate or NTLM authentication then you can tell
              curl to select the user name and password from your environment by specifying a single colon with this option:
              "-U :".

              On  systems where it works, curl will hide the given option argument from process listings. This is not enough
              to protect credentials from possibly getting seen by other users on the same system as they will still be vis‐
              ible for a brief moment before cleared. Such sensitive data should be retrieved from a file instead or similar
              and never used in clear text in a command line.

              If this option is used several times, the last one will be used.

       -x, --proxy [protocol://]host[:port]
              Use the specified proxy.

              The proxy string can be specified with a protocol:// prefix. No protocol specified or http:// will be  treated
              as  HTTP  proxy.  Use socks4://, socks4a://, socks5:// or socks5h:// to request a specific SOCKS version to be
              used.  (The protocol support was added in curl 7.21.7)

              HTTPS proxy support via https:// protocol prefix was added in 7.52.0 for OpenSSL, GnuTLS and NSS.

              Unrecognized and unsupported proxy protocols cause an error since 7.52.0.  Prior versions may ignore the  pro‐
              tocol and use http:// instead.

              If the port number is not specified in the proxy string, it is assumed to be 1080.

              This  option  overrides  existing  environment  variables that set the proxy to use. If there's an environment
              variable setting a proxy, you can set proxy to "" to override it.

              All operations that are performed over an HTTP proxy will transparently be converted to HTTP.  It  means  that
              certain  protocol  specific  operations might not be available. This is not the case if you can tunnel through
              the proxy, as one with the _-_p_, _-_-_p_r_o_x_y_t_u_n_n_e_l option.

              User and password that might be provided in the proxy string are URL decoded by curl. This allows you to  pass
              in special characters such as @ by using %40 or pass in a colon with %3a.

              The  proxy host can be specified the exact same way as the proxy environment variables, including the protocol
              prefix (http://) and the embedded user + password.

              If this option is used several times, the last one will be used.

       --proxy1.0 <host[:port]>
              Use the specified HTTP 1.0 proxy. If the port number is not specified, it is assumed at port 1080.

              The only difference between this and the HTTP proxy option _-_x_,  _-_-_p_r_o_x_y,  is  that  attempts  to  use  CONNECT
              through the proxy will specify an HTTP 1.0 protocol instead of the default HTTP 1.1.

       -p, --proxytunnel
              When  an  HTTP  proxy is used _-_x_, _-_-_p_r_o_x_y, this option will make curl tunnel through the proxy. The tunnel ap‐
              proach is made with the HTTP proxy CONNECT request and requires that the proxy allows direct  connect  to  the
              remote port number curl wants to tunnel through to.

              To suppress proxy CONNECT response headers when curl is set to output headers use _-_-_s_u_p_p_r_e_s_s_-_c_o_n_n_e_c_t_-_h_e_a_d_e_r_s.

              See also _-_x_, _-_-_p_r_o_x_y.

       --pubkey <key>
              (SFTP SCP) Public key file name. Allows you to provide your public key in this separate file.

              If this option is used several times, the last one will be used.

              (As  of  7.39.0,  curl  attempts to automatically extract the public key from the private key file, so passing
              this option is generally not required. Note that this public key extraction  requires  libcurl  to  be  linked
              against a copy of libssh2 1.2.8 or higher that is itself linked against OpenSSL.)

       -Q, --quote
              (FTP  SFTP)  Send  an  arbitrary  command to the remote FTP or SFTP server. Quote commands are sent BEFORE the
              transfer takes place (just after the initial PWD command in an FTP transfer, to be exact).  To  make  commands
              take  place after a successful transfer, prefix them with a dash '-'.  To make commands be sent after curl has
              changed the working directory, just before the transfer command(s), prefix the command with  a  '+'  (this  is
              only supported for FTP). You may specify any number of commands.

              If  the  server  returns  failure for one of the commands, the entire operation will be aborted. You must send
              syntactically correct FTP commands as RFC 959 defines to FTP servers, or one of the commands listed  below  to
              SFTP servers.

              Prefix  the  command  with  an asterisk (*) to make curl continue even if the command fails as by default curl
              will stop at first failure.

              This option can be used multiple times.

              SFTP is a binary protocol. Unlike for FTP, curl interprets SFTP quote commands itself before sending  them  to
              the  server.   File  names  may be quoted shell-style to embed spaces or special characters.  Following is the
              list of all supported SFTP quote commands:

              chgrp group file
                     The chgrp command sets the group ID of the file named by the file operand to the group ID specified  by
                     the group operand. The group operand is a decimal integer group ID.

              chmod mode file
                     The chmod command modifies the file mode bits of the specified file. The mode operand is an octal inte‐
                     ger mode number.

              chown user file
                     The chown command sets the owner of the file named by the file operand to the user ID specified by  the
                     user operand. The user operand is a decimal integer user ID.

              ln source_file target_file
                     The  ln  and  symlink  commands  create  a  symbolic  link  at the target_file location pointing to the
                     source_file location.

              mkdir directory_name
                     The mkdir command creates the directory named by the directory_name operand.

              pwd    The pwd command returns the absolute pathname of the current working directory.

              rename source target
                     The rename command renames the file or directory named by the source operand to  the  destination  path
                     named by the target operand.

              rm file
                     The rm command removes the file specified by the file operand.

              rmdir directory
                     The rmdir command removes the directory entry specified by the directory operand, provided it is empty.

              symlink source_file target_file
                     See ln.

       --random-file <file>
              Specify  the path name to file containing what will be considered as random data. The data may be used to seed
              the random engine for SSL connections.  See also the _-_-_e_g_d_-_f_i_l_e option.

       -r, --range <range>
              (HTTP FTP SFTP FILE) Retrieve a byte range (i.e. a partial document) from an HTTP/1.1, FTP or SFTP server or a
              local FILE. Ranges can be specified in a number of ways.

              00--449999     specifies the first 500 bytes

              550000--999999   specifies the second 500 bytes

              --550000      specifies the last 500 bytes

              99550000--     specifies the bytes from offset 9500 and forward

              00--00,,--11    specifies the first and last byte only(*)(HTTP)

              110000--119999,,550000--559999
                        specifies two separate 100-byte ranges(*) (HTTP)

              (*) = NOTE that this will cause the server to reply with a multipart response!

              Only  digit characters (0-9) are valid in the 'start' and 'stop' fields of the 'start-stop' range syntax. If a
              non-digit character is given in the range, the  server's  response  will  be  unspecified,  depending  on  the
              server's configuration.

              You should also be aware that many HTTP/1.1 servers do not have this feature enabled, so that when you attempt
              to get a range, you'll instead get the whole document.

              FTP and SFTP range downloads only support the simple 'start-stop' syntax (optionally with one of  the  numbers
              omitted). FTP use depends on the extended FTP command SIZE.

              If this option is used several times, the last one will be used.

       --raw  (HTTP)  When  used,  it disables all internal HTTP decoding of content or transfer encodings and instead makes
              them passed on unaltered, raw.

              Added in 7.16.2.

       -e, --referer <URL>
              (HTTP) Sends the "Referrer Page" information to the HTTP server. This can also be set with  the  _-_H_,  _-_-_h_e_a_d_e_r
              flag  of  course.   When used with _-_L_, _-_-_l_o_c_a_t_i_o_n you can append ";auto" to the _-_e_, _-_-_r_e_f_e_r_e_r URL to make curl
              automatically set the previous URL when it follows a Location: header. The ";auto" string can be  used  alone,
              even if you don't set an initial _-_e_, _-_-_r_e_f_e_r_e_r.

              If this option is used several times, the last one will be used.

              See also _-_A_, _-_-_u_s_e_r_-_a_g_e_n_t and _-_H_, _-_-_h_e_a_d_e_r.

       -J, --remote-header-name
              (HTTP) This option tells the _-_O_, _-_-_r_e_m_o_t_e_-_n_a_m_e option to use the server-specified Content-Disposition filename
              instead of extracting a filename from the URL.

              If the server specifies a file name and a file with that name already exists in the current working  directory
              it will not be overwritten and an error will occur. If the server doesn't specify a file name then this option
              has no effect.

              There's no attempt to decode %-sequences (yet) in the provided file name, so this option may provide you  with
              rather unexpected file names.

              WWAARRNNIINNGG:  Exercise judicious use of this option, especially on Windows. A rogue server could send you the name
              of a DLL or other file that could possibly be loaded automatically by Windows or some third party software.

       --remote-name-all
              This option changes the default action for all given URLs to be dealt with as if _-_O_, _-_-_r_e_m_o_t_e_-_n_a_m_e  were  used
              for  each  one.  So  if you want to disable that for a specific URL after _-_-_r_e_m_o_t_e_-_n_a_m_e_-_a_l_l has been used, you
              must use "-o -" or --no-remote-name.

              Added in 7.19.0.

       -O, --remote-name
              Write output to a local file named like the remote file we get. (Only the file part  of  the  remote  file  is
              used, the path is cut off.)

              The  file will be saved in the current working directory. If you want the file saved in a different directory,
              make sure you change the current working directory before invoking curl with this option.

              The remote file name to use for saving is extracted from the given URL, nothing else, and if it already exists
              it  will  be  overwritten.  If  you  want the server to be able to choose the file name refer to _-_J_, _-_-_r_e_m_o_t_e_-
              _h_e_a_d_e_r_-_n_a_m_e which can be used in addition to this option. If the server chooses a file name and that name  al‐
              ready exists it will not be overwritten.

              There  is  no  URL  decoding done on the file name. If it has %20 or other URL encoded parts of the name, they
              will end up as-is as file name.

              You may use this option as many times as the number of URLs you have.

       -R, --remote-time
              When used, this will make curl attempt to figure out the timestamp of the remote file, and if that  is  avail‐
              able make the local file get that same timestamp.

       --request-target
              (HTTP) Tells curl to use an alternative "target" (path) instead of using the path as provided in the URL. Par‐
              ticularly useful when wanting to issue HTTP requests without leading slash or other data that  doesn't  follow
              the regular URL pattern, like "OPTIONS *".

              Added in 7.55.0.

       -X, --request <command>
              (HTTP)  Specifies  a  custom request method to use when communicating with the HTTP server.  The specified re‐
              quest method will be used instead of the method otherwise used (which defaults to  GET).  Read  the  HTTP  1.1
              specification  for  details  and explanations. Common additional HTTP requests include PUT and DELETE, but re‐
              lated technologies like WebDAV offers PROPFIND, COPY, MOVE and more.

              Normally you don't need this option. All sorts of GET, HEAD, POST and PUT requests are rather invoked by using
              dedicated command line options.

              This  option only changes the actual word used in the HTTP request, it does not alter the way curl behaves. So
              for example if you want to make a proper HEAD request, using -X HEAD will not suffice. You need to use the _-_I_,
              _-_-_h_e_a_d option.

              The  method  string you set with _-_X_, _-_-_r_e_q_u_e_s_t will be used for all requests, which if you for example use _-_L_,
              _-_-_l_o_c_a_t_i_o_n may cause unintended side-effects when curl doesn't change request method according to the HTTP 30x
              response codes - and similar.

              (FTP) Specifies a custom FTP command to use instead of LIST when doing file lists with FTP.

              (POP3) Specifies a custom POP3 command to use instead of LIST or RETR. (Added in 7.26.0)

              (IMAP) Specifies a custom IMAP command to use instead of LIST. (Added in 7.30.0)

              (SMTP) Specifies a custom SMTP command to use instead of HELP or VRFY. (Added in 7.34.0)

              If this option is used several times, the last one will be used.

       --resolve <host:port:address[,address]...>
              Provide  a custom address for a specific host and port pair. Using this, you can make the curl requests(s) use
              a specified address and prevent the otherwise normally resolved address to be used.  Consider  it  a  sort  of
              /etc/hosts  alternative  provided  on the command line. The port number should be the number used for the spe‐
              cific protocol the host will be used for. It means you need several entries if you want to provide address for
              the same host but different ports.

              By  specifying  '*'  as host you can tell curl to resolve any host and specific port pair to the specified ad‐
              dress. Wildcard is resolved last so any _-_-_r_e_s_o_l_v_e with a specific host and port will be used first.

              The provided address set by this option will be used even if _-_4_, _-_-_i_p_v_4 or _-_6_, _-_-_i_p_v_6 is set to make curl  use
              another IP version.

              Support for providing the IP address within [brackets] was added in 7.57.0.

              Support for providing multiple IP addresses per entry was added in 7.59.0.

              Support for resolving with wildcard was added in 7.64.0.

              This option can be used many times to add many host names to resolve.

              Added in 7.21.3.

       --retry-connrefused
              In  addition  to the other conditions, consider ECONNREFUSED as a transient error too for _-_-_r_e_t_r_y. This option
              is used together with --retry.

              Added in 7.52.0.

       --retry-delay <seconds>
              Make curl sleep this amount of time before each retry when a transfer has failed with a  transient  error  (it
              changes  the  default  backoff  time algorithm between retries). This option is only interesting if _-_-_r_e_t_r_y is
              also used. Setting this delay to zero will make curl use the default backoff time.

              If this option is used several times, the last one will be used.

              Added in 7.12.3.

       --retry-max-time <seconds>
              The retry timer is reset before the first transfer attempt. Retries will be done as  usual  (see  _-_-_r_e_t_r_y)  as
              long  as the timer hasn't reached this given limit. Notice that if the timer hasn't reached the limit, the re‐
              quest will be made and while performing, it may take longer than this given time period. To limit a single re‐
              quest´s maximum time, use _-_m_, _-_-_m_a_x_-_t_i_m_e.  Set this option to zero to not timeout retries.

              If this option is used several times, the last one will be used.

              Added in 7.12.3.

       --retry <num>
          